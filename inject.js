// Generated by LiveScript 1.3.1
(function(){
  var storage, getStorage, findAndFill, fillForm, isLoginOkPage, isLoginFailPage, autoSubmitForm;
  storage = null;
  getStorage = function(cb){
    return chrome.storage.local.get(null, function(s){
      storage = s;
      return cb();
    });
  };
  findAndFill = curry$(function(id, value){
    value == null && (value = '');
    return document.getElementById(storage[id]).value = storage[value];
  });
  fillForm = function(cb){
    return getStorage(function(){
      var image, e;
      try {
        findAndFill('Login Name Field ID', 'Login Name Field Value');
        findAndFill('Password Field ID', 'Password Field Value');
        try {
          image = new Image;
          image.src = document.getElementById(storage['Captcha Picture ID']).src;
          return image.addEventListener('load', function(){
            var canvas, imgDraw, string;
            canvas = document.createElement('canvas');
            canvas.height = image.height;
            canvas.width = image.width;
            imgDraw = canvas.getContext('2d');
            imgDraw.drawImage(image, 0, 0);
            string = OCRAD(imgDraw);
            document.getElementById(storage['Captcha Input Field ID']).value = string;
            return cb();
          });
        } catch (e$) {
          e = e$;
          return cb();
        }
      } catch (e$) {
        return e = e$;
      }
    });
  };
  isLoginOkPage = function(){
    var ref$;
    return ((ref$ = document.getElementsByClassName('alert alert-success')) != null ? ref$.length : void 8) > 0;
  };
  isLoginFailPage = function(){
    var ref$;
    return ((ref$ = document.getElementsByClassName('alert alert-danger')) != null ? ref$.length : void 8) > 0;
  };
  autoSubmitForm = function(){
    var form;
    if (!storage['Auto Submit']) {
      return;
    }
    if (isLoginOkPage()) {
      return;
    }
    if (isLoginFailPage()) {
      alert('Auto login failed');
      return;
    }
    form = document.getElementById(storage['Form ID']);
    return form.submit();
  };
  chrome.runtime.onMessage.addListener(function(request, _, sendResponse){
    if ((request != null ? request.command : void 8) === 'fill') {
      return getStorage(function(){
        return fillForm(function(){
          autoSubmitForm();
          return sendResponse(true);
        });
      });
    }
  });
  fillForm(function(){
    return autoSubmitForm();
  });
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
